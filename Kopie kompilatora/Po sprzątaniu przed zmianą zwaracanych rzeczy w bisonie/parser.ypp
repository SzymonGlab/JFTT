%{
#include "compilator.cpp"    

#include<string>
#include<iostream>
#include<cmath>

using namespace std;

extern int yylex();
extern int yylineno;
extern FILE *yyin;
int yyerror(string);

// bool error = false;

%}

%union{
    char* str;
    long long int NUMBER;
}


%token <str> NUMBER MINUS
%token <str> DECLARE _BEGIN END IF THEN ELSE ENDIF
%token <str> WHILE DO ENDWHILE ENDDO FOR FROM ENDFOR
%token <str> COL WRITE READ PIDENTIFER SEM TO DOWNTO COMA
%token <str> LB RB ASSIGN EQ LE GE LEQ GEQ NEQ ADD SUB MUL DIV MOD

%type <str> value
%type <str> identifier
%type <str> expression


%%

program:
     DECLARE declarations _BEGIN commands END                               {add_command("HALT"); create_ASM("result");}
     | _BEGIN commands END                                           
    ;

 declarations:
      declarations COMA PIDENTIFER                                          {__declare_variable($3,"1");}                                                                         
     | declarations COMA PIDENTIFER LB NUMBER COL NUMBER RB                 {__declare_array($3,$5,$7);}
     | PIDENTIFER                                                           {__declare_variable($1,"1");} 
     | PIDENTIFER LB NUMBER COL NUMBER RB                                   {__declare_array($1,$3,$5);}
    ;

 commands:
       commands command
       | command;

 command:                                  
         identifier ASSIGN expression SEM                                     {__assign_variable($1);}                                    
   ///  | IF condition THEN commands ELSE commands ENDIF
   ///  | IF condition THEN commands ENDIF
   ///  | WHILE condition DO commands ENDWHILE
   ///  | DO commands WHILE condition ENDDO
   ///  | FOR pidentifier FROM value TO value DO commands ENDFOR
   ///  | FOR pidentifier FROM value DOWNTO value DO commands ENDFOR
        | READ identifier SEM                                                 {__read($2);}
        | WRITE value SEM                                                     {__write($2);}
    ;

 expression:
    value               {}               
    | value ADD value   {__add($1,$3);}                                                    
    | value SUB value   {__sub($1,$3);}                                                   
    | value MUL value   {__mul($1,$3);}                                                      
    | value DIV value   {__div($1,$3);}                                                      
    | value MOD value   {__mod($1,$3);}                                                      
    ;

  condition:
    value EQ value      {__EQ($1,$3);}
    | value NEQ value   {__NEQ($1,$3);}
    | value LE value    {__LE($1,$3);}
    | value GE value    {__GE($1,$3);}
    | value LEQ value   {__LEQ($1,$3);}
    | value GEQ value   {__GEQ($1,$3);}
    ;

 value:
    NUMBER                                                                 {__create_temp_variable($1,$1);}
    | identifier                                                  
    ;

 identifier:
    PIDENTIFER                                                                                                                      
    | PIDENTIFER LB NUMBER RB                                              {$$ = concat_chars($1,$3);}
    | PIDENTIFER LB PIDENTIFER RB                                          {$$ = __read_variable_from_arrayVAR($1,$3);}
    ;

 %%

int yyerror(string s)
{
    cout << s << endl;
    return 0;
}

int main(int argc, char *argv[])
{
    createOnes();
    yyin = fopen(argv[1], "r");
    if (yyin == NULL)
        cout << "NO FILE" << endl;
	yyparse();
    cout << "Compiled without errors •ᴗ•\n" << endl;
	return 0;
}